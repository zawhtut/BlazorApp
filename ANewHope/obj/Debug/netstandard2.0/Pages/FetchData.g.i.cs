#pragma checksum "C:\Projects\Blazor App\ANewHope\Pages\FetchData.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2ed0073fdabfb5970342294d8d16959da577f0bc"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ANewHope.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using ANewHope;
    using ANewHope.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/fetchdata")]
    public class FetchData : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 55 "C:\Projects\Blazor App\ANewHope\Pages\FetchData.cshtml"
            
    String zip = String.Empty;
    String errorMessage = String.Empty;
    Models.CurrentConditions currentcondition;
    Models.Alert alerts;
    Models.ZipLookup ziplookup;
    String imgurl = "";
    bool weatherLoaded = false;

    private async Task GetWeather()
    {
        Http.DefaultRequestHeaders.Add("Accept", "application/vnd.noaa.dwml+json;version=1");
        Http.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36");

        // get location info from zip
        try
        {
            errorMessage = "";
            var zipresultStr = await Http.GetStringAsync($"http://api.zippopotam.us/US/{zip}");
            zipresultStr = zipresultStr.Replace("place name", "city").Replace("state abbreviation", "stateabbr");
            ziplookup = JsonUtil.Deserialize<Models.ZipLookup>(zipresultStr);
        }
        catch
        {
            errorMessage = "Invalid zip code";
            return;
        }

        // get current condition by zip
        currentcondition = await Http.GetJsonAsync<Models.CurrentConditions>($"http://api.openweathermap.org/data/2.5/weather?zip={zip},us&appid=93f0b74104f16e4f15a144056218b830");
        imgurl = $"http://openweathermap.org/img/w/{currentcondition.weather[0].icon}.png";

        // retrieve nws alerts for state
        alerts = await Http.GetJsonAsync<Models.Alert>($"https://api.weather.gov/alerts/active/area/{ziplookup.places[0].stateabbr}");

        weatherLoaded = true;
    }

    private decimal ConvertKtoF(decimal kelvin, int decimals)
    {
        return Math.Round(kelvin * 9 / 5 - 459.67M, decimals);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
